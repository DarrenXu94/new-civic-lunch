---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION, RATING_ARRAY } from "../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";

const latestThreePosts = (await getCollection("reviews"))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 3);

const alphabeticalPosts = (await getCollection("reviews")).sort((a, b) => {
  if (a.data.title.toLowerCase() < b.data.title.toLowerCase()) {
    return -1;
  }
  if (a.data.title.toLowerCase() > b.data.title.toLowerCase()) {
    return 1;
  }
  return 0;
});

const uniqueTags = [...RATING_ARRAY];
---

<script>
  import JSConfetti from "js-confetti";
  const jsConfetti = new JSConfetti();

  jsConfetti.addConfetti({
    emojis: ["üçî", "üåØ", "üç¶", "üç°", "üç±", "üçô", "üç∞", "üçü", "üçó", "üçï"],
    emojiSize: 40,
  });
</script>

<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
      main {
        width: 960px;
      }

      h2 {
        padding-bottom: 1rem;
      }

      hr {
        padding-bottom: 2rem;
      }

      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        list-style-type: none;
        margin: 0;
        padding: 0;
        padding-bottom: 2rem;
      }
      ul li {
        width: calc(50% - 1rem);
      }
      ul li * {
        text-decoration: none;
        transition: 0.2s ease;
      }
      ul li:nth-child(3n-2) {
        width: 100%;
        margin-bottom: 1rem;
        text-align: center;
      }
      ul li img {
        width: 100%;
      }
      ul li:nth-child(3n-2) .title {
        font-size: 2.369rem;
      }
      ul li img {
        margin-bottom: 0.5rem;
        border-radius: 12px;
        object-fit: cover;
      }
      ul li a {
        display: block;
      }
      .title {
        margin: 0;
        color: rgb(var(--black));
        line-height: 1;
      }
      .date {
        margin: 0;
        color: rgb(var(--gray));
      }
      ul li a:hover h4,
      ul li a:hover .date {
        color: rgb(var(--accent));
      }
      ul a:hover img {
        box-shadow: var(--box-shadow);
      }

      .pill-btn {
        background-color: var(--accent);
        color: #fff;
        border: none;
        border-radius: 999px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: 0.2s ease;
      }

      .pill-btn.all {
        background-color: #000;
      }

      .pill-btn.active {
        transform: scale(1.3);
      }

      .btn-group {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
      }

      .hidden {
        display: none;
      }

      @media (max-width: 720px) {
        ul {
          gap: 0.5em;
        }
        ul li {
          width: 100%;
          text-align: center;
        }
        ul li:first-child {
          margin-bottom: 0;
        }
        ul li:first-child .title {
          font-size: 1.563em;
        }
      }
    </style>
  </head>
  <body>
    <Header title={SITE_TITLE} />
    <main>
      <section>
        <h2>Latest reviews</h2>
        <ul>
          {
            latestThreePosts.map((post) => (
              <li>
                <a href={`/blog/${post.slug}/`}>
                  <img
                    width={720}
                    height={360}
                    src={post.data.heroImage}
                    alt=""
                  />
                  <h4 class="title">
                    {post.data.title} {post.data.graveyard && "ü™¶ (Closed) "}
                  </h4>
                  <p class="date">
                    <FormattedDate date={post.data.pubDate} />
                  </p>
                  {post.data.graveyard && "ü™¶"}
                </a>
              </li>
            ))
          }
        </ul>
        <hr />

        <h2>All reviews ({alphabeticalPosts.length})</h2>

        <details>
          <summary>Filters</summary>

          <div id="filter-buttons" class="btn-group">
            <button class="pill-btn all" data-filter="all">Clear</button>
            {
              uniqueTags.map((tag) => (
                <button class="pill-btn" data-filter={tag}>
                  {tag} Tier
                </button>
              ))
            }
          </div>
        </details>

        <ul id="posts-list">
          {
            alphabeticalPosts.map((post) => (
              <li data-title={post.data.title} data-rating={post.data.rating}>
                <a href={`/blog/${post.slug}/`}>
                  <img
                    width={720}
                    height={360}
                    src={post.data.heroImage}
                    alt=""
                  />
                  <h4 class="title">
                    {post.data.title} {post.data.graveyard && "ü™¶ (Closed) "}
                  </h4>
                  <p class="date">
                    <FormattedDate date={post.data.pubDate} />
                  </p>
                </a>
              </li>
            ))
          }
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll("#filter-buttons button");
    const posts = document.querySelectorAll(
      "#posts-list li"
    ) as unknown as HTMLElement[];
    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        const filter = button.getAttribute("data-filter");

        buttons.forEach((button) => {
          button.classList.remove("active");
        });

        if (filter !== "all") {
          button.classList.add("active");
        }

        posts.forEach((post) => {
          const tags = post.getAttribute("data-rating");
          if (!tags) return;
          if (filter === "all" || tags === filter) {
            // post.style.display = "";
            post.classList.remove("hidden");
          } else {
            // post.style.display = "none";
            post.classList.add("hidden");
          }
        });

        updateLayout();
      });
    });

    const listItems = document.querySelectorAll(
      "ul li"
    ) as unknown as HTMLElement[];

    /**
     * Update the layout of the list items based on the number of visible items
     */
    function updateLayout() {
      let visibleCount = 0;

      listItems.forEach((item) => {
        if (!item.classList.contains("hidden")) {
          visibleCount++;
          if (visibleCount % 3 === 1) {
            item.style.width = "100%";
            item.style.marginBottom = "1rem";
            item.style.textAlign = "center";
          } else {
            item.style.width = "calc(50% - 1rem)";
            item.style.marginBottom = "0";
            item.style.textAlign = "left";
          }
        }
      });
    }
  });
</script>
